plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.1.0'
	// Jacoco 플러그인!
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// DB
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// Swagger
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation "io.springfox:springfox-swagger-ui:3.0.0"

	// Security
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.7.5'

	// Thymeleaf
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Social Login
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:2.6.2'

	// email 인증
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// https://mvnrepository.com/artifact/org.webjars.bower/jquery
	implementation group: 'org.webjars.bower', name: 'jquery', version: '3.6.2'

	//aws
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	implementation "com.amazonaws:aws-java-sdk-s3:1.12.395"

	// Chatting => WebSocket, STOMP, SockJs
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation group: 'org.webjars', name: 'stomp-websocket', version: '2.3.3-1'
	implementation 'org.webjars:sockjs-client:1.5.1'

	// JSON 데이터 처리하기
	implementation 'com.google.code.gson:gson:2.9.0'

}

tasks.named('test') {
	useJUnitPlatform()
	// 테스트와 jacocoTestReport 플러그인의 연걸 -> 테스트 실행하면 jacocoTestReport도 같이 실행 됨.
	finalizedBy 'jacocoTestReport'
}

// jacoco 설정
jacoco {
	toolVersion = '0.8.5'
}

// jacoco 결과를 어떤 형태의 보고서로 받아 볼 것인지 선택
jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled false
		csv.enabled false
	}
	// TestReport 실행 시 TestCoverageVerification 같이 실행.
	// 즉, test -> jacocoTestReport -> jacocoTestCoverageVerification 순서로 실행 됨.
	finalizedBy 'jacocoTestCoverageVerification'
}

// 테스트 커버리지를 최소 기준 설정!!
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true // 활성화 여부
			element = 'CLASS'  // 클래스 단위로 커버리지 체크

			// 실제 기준 설정
			limit {
				counter = 'BRANCH'  // 조건문 등의 분기를 통해 커버리지 파악
				value = 'COVEREDRATIO'  // 파악한 커버리지를  %로 보여줌
				minimum = 0.60 // 최소 기준은 60%
			}

			// jacoco 적용을 제외할 클래스 -> "패키지 레벨의 경로"로 지정해야 함.
			// excludes = []
		}
	}
}